#V2
RETURN (SELECT id FROM testy WHERE foo = "baz").id;
CREATE test2 SET inner = [id: testy:niipetdwxvv4jqxs9knl];
CREATE test2 SET inner = [testy:niipetdwxvv4jqxs9knl];
CREATE test3 SET outer = [test2:ibmwp36xz9on8d1lxxvd];
SELECT * FROM test3 FETCH outer;
SELECT * FROM test3 FETCH outer.inner;
SELECT * FROM test3 FETCH outer.inner.*;
SELECT * FROM test3 FETCH *;
SELECT * FROM test3 FETCH outer.*;
SELECT * FROM test3 FETCH inner;
SELECT * FROM test3 FETCH outer, outer.inner;
SELECT id FROM testy WHERE foo = "baz"
SELECT VALUE id FROM testy WHERE foo = "baz"
SELECT VALUE * FROM testy WHERE foo = "baz"
SELECT * FROM testy WHERE foo = "baz"
SELECT VALUE id FROM testy WHERE extra_field = "bam";
CREATE test5 SET foo = "bar", bar = [1, 2, 3];
UPDATE test5 SET bar += 4
UPDATE test5 SET bar += [3. 4];
UPDATE test5 SET bar += [3, 4];
CREATE test5 SET foo = "baz", bar = [1, 2, 3];
LET $test = SELECT test5:xq9f678h1lpjsf8mq6k0;
LET $test = SELECT test5:xq9f678h1lpjsf8mq6k0 FROM test5;
RETURN $test5;
RETURN $test;
LET $test = SELECT * FROM test5:xq9f678h1lpjsf8mq6k0;
RETURN $test;
UPDATE test5 SET bar += $test.bar;
UPDATE test5:lhf4f739ehuk6h0ewvr0 SET bar += $test.bar;
UPDATE test5:lhf4f739ehuk6h0ewvr0 SET bar += test5:xq9f678h1lpjsf8mq6k0;
INFO FOR KV;
INFO FOR DB;
BEGIN; CREATE tx:1 SET oh = "no"; CREATE report; COMMIT;
SELECT * FROM tx;
BEGIN; CREATE tx:1 SET oh = "no"; COMMIT;
-- Setup
-- -- Functions
DEFINE FUNCTION fn::report_id($token_id: string, $timestamp: int, $target: string) {
    RETURN type::thing(
        "report",
        crypto::md5(string::concat($token_id, $timestamp, $target))
);}
DEFINE FUNCTION fn::report_exists($report_id: record()) {
    RETURN $report_id IN (SELECT id FROM report).id;
};
-- -- Scopes
DEFINE SCOPE user_scope
SESSION 14d
SIGNUP (
    CREATE type::thing("user", string::lowercase(string::trim($username)))
    SET pass = crypto::argon2::generate($password)
)
SIGNIN (
    SELECT * FROM type::thing("user", string::lowercase(string::trim($username)))
    WHERE crypto::argon2::compare(pass, $password)
);
-- -- Tables
-- -- -- Report Table
DEFINE TABLE report SCHEMAFULL
    PERMISSIONS
        FOR select, create, update, delete
        WHERE user = $token.id AND $scope = "user_scope";
DEFINE FIELD user ON TABLE report TYPE record (user)
    ASSERT $value != NONE;
DEFINE FIELD target ON TABLE report TYPE string
    ASSERT $value != NONE AND is::url($value);
DEFINE FIELD timestamp ON TABLE report TYPE datetime
    ASSERT $value != NONE;
DEFINE FIELD subdomains ON TABLE report TYPE array
    VALUE $value OR [];
DEFINE FIELD subdomains.* ON TABLE report TYPE record (subdomain);
DEFINE TABLE subdomain SCHEMAFULL
    PERMISSIONS
        FOR select, create, update, delete
        WHERE report.user = $token.id AND $scope = "user_scope";
DEFINE FIELD report ON TABLE subdomain TYPE record (report)
    ASSERT $value != NONE AND fn::report_exists($value);
DEFINE FIELD subdomain_url ON TABLE subdomain TYPE string
    ASSERT $value != NONE AND is::url($value);
DEFINE FIELD ports ON TABLE subdomain TYPE array
    VALUE $value OR [];
DEFINE FIELD ports.* ON TABLE subdomain TYPE record (port);
DEFINE TABLE port SCHEMAFULL
    PERMISSIONS
        FOR select, create, update, delete
        WHERE subdomain.report.user = $token.id AND $scope = "user_scope";
DEFINE FIELD subdomain ON TABLE port TYPE record (subdomain)
    ASSERT $value != NONE;
DEFINE FIELD port ON TABLE port TYPE int
    ASSERT $value != NONE;
DEFINE FIELD findings ON TABLE port TYPE array
    VALUE $value OR [];
DEFINE FIELD is_open ON TABLE port TYPE boolean
    VALUE $value OR true;
DEFINE FIELD findings.* ON TABLE port TYPE object;
-- TODO: define events
-- Setup\n-- -- Functions\nDEFINE FUNCTION fn::report_id($token_id: string, $timestamp: int, $target: string) {\n    RETURN type::thing(\n        "report",\n        crypto::md5(string::concat($token_id, $timestamp, $target))\n);}\n\nDEFINE FUNCTION fn::report_exists($report_id: record()) {\n    RETURN $report_id IN (SELECT id FROM report).id;\n};\n-- -- Scopes\nDEFINE SCOPE user_scope\nSESSION 14d\nSIGNUP (\n    CREATE type::thing("user", string::lowercase(string::trim($username)))\n    SET pass = crypto::argon2::generate($password)\n)\nSIGNIN (\n    SELECT * FROM type::thing("user", string::lowercase(string::trim($username)))\n    WHERE crypto::argon2::compare(pass, $password)\n);\n-- -- Tables\n-- -- -- Report Table\nDEFINE TABLE report SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE user = $token.id AND $scope = "user_scope";\nDEFINE FIELD user ON TABLE report TYPE record (user)\n    ASSERT $value != NONE;\nDEFINE FIELD target ON TABLE report TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD timestamp ON TABLE report TYPE datetime\n    ASSERT $value != NONE;\nDEFINE FIELD subdomains ON TABLE report TYPE array\n    VALUE $value OR [];\nDEFINE FIELD subdomains.* ON TABLE report TYPE record (subdomain);\n\nDEFINE TABLE subdomain SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD report ON TABLE subdomain TYPE record (report)\n    ASSERT $value != NONE AND fn::report_exists($value);\nDEFINE FIELD subdomain_url ON TABLE subdomain TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD ports ON TABLE subdomain TYPE array\n    VALUE $value OR [];\nDEFINE FIELD ports.* ON TABLE subdomain TYPE record (port);\n\nDEFINE TABLE port SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE subdomain.report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD subdomain ON TABLE port TYPE record (subdomain)\n    ASSERT $value != NONE;\nDEFINE FIELD port ON TABLE port TYPE int\n    ASSERT $value != NONE;\nDEFINE FIELD findings ON TABLE port TYPE array\n    VALUE $value OR [];\nDEFINE FIELD is_open ON TABLE port TYPE boolean\n    VALUE $value OR true;\nDEFINE FIELD findings.* ON TABLE port TYPE object;\n\n-- TODO: define events
-- Setup\n-- -- Functions\nDEFINE FUNCTION fn::report_id($token_id: string, $timestamp: int, $target: string) {\n    RETURN type::thing(\n        "report",\n        crypto::md5(string::concat($token_id, $timestamp, $target))\n);}\nDEFINE FUNCTION fn::report_exists($report_id: record()) {\n    RETURN $report_id IN (SELECT id FROM report).id;\n};\n-- -- Scopes\nDEFINE SCOPE user_scope\nSESSION 14d\nSIGNUP (\n    CREATE type::thing("user", string::lowercase(string::trim($username)))\n    SET pass = crypto::argon2::generate($password)\n)\nSIGNIN (\n    SELECT * FROM type::thing("user", string::lowercase(string::trim($username)))\n    WHERE crypto::argon2::compare(pass, $password)\n);\n-- -- Tables\n-- -- -- Report Table\nDEFINE TABLE report SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE user = $token.id AND $scope = "user_scope";\nDEFINE FIELD user ON TABLE report TYPE record (user)\n    ASSERT $value != NONE;\nDEFINE FIELD target ON TABLE report TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD timestamp ON TABLE report TYPE datetime\n    ASSERT $value != NONE;\nDEFINE FIELD subdomains ON TABLE report TYPE array\n    VALUE $value OR [];\nDEFINE FIELD subdomains.* ON TABLE report TYPE record (subdomain);\n\nDEFINE TABLE subdomain SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD report ON TABLE subdomain TYPE record (report)\n    ASSERT $value != NONE AND fn::report_exists($value);\nDEFINE FIELD subdomain_url ON TABLE subdomain TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD ports ON TABLE subdomain TYPE array\n    VALUE $value OR [];\nDEFINE FIELD ports.* ON TABLE subdomain TYPE record (port);\n\nDEFINE TABLE port SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE subdomain.report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD subdomain ON TABLE port TYPE record (subdomain)\n    ASSERT $value != NONE;\nDEFINE FIELD port ON TABLE port TYPE int\n    ASSERT $value != NONE;\nDEFINE FIELD findings ON TABLE port TYPE array\n    VALUE $value OR [];\nDEFINE FIELD is_open ON TABLE port TYPE boolean\n    VALUE $value OR true;\nDEFINE FIELD findings.* ON TABLE port TYPE object;\n\n-- TODO: define events
-- Setup\n-- -- Functions\nDEFINE FUNCTION fn::report_id($token_id: string, $timestamp: int, $target: string) {\n    RETURN type::thing(\n        "report",\n        crypto::md5(string::concat($token_id, $timestamp, $target))\n);};\nDEFINE FUNCTION fn::report_exists($report_id: record()) {\n    RETURN $report_id IN (SELECT id FROM report).id;\n};\n-- -- Scopes\nDEFINE SCOPE user_scope\nSESSION 14d\nSIGNUP (\n    CREATE type::thing("user", string::lowercase(string::trim($username)))\n    SET pass = crypto::argon2::generate($password)\n)\nSIGNIN (\n    SELECT * FROM type::thing("user", string::lowercase(string::trim($username)))\n    WHERE crypto::argon2::compare(pass, $password)\n);\n-- -- Tables\n-- -- -- Report Table\nDEFINE TABLE report SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE user = $token.id AND $scope = "user_scope";\nDEFINE FIELD user ON TABLE report TYPE record (user)\n    ASSERT $value != NONE;\nDEFINE FIELD target ON TABLE report TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD timestamp ON TABLE report TYPE datetime\n    ASSERT $value != NONE;\nDEFINE FIELD subdomains ON TABLE report TYPE array\n    VALUE $value OR [];\nDEFINE FIELD subdomains.* ON TABLE report TYPE record (subdomain);\n\nDEFINE TABLE subdomain SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD report ON TABLE subdomain TYPE record (report)\n    ASSERT $value != NONE AND fn::report_exists($value);\nDEFINE FIELD subdomain_url ON TABLE subdomain TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD ports ON TABLE subdomain TYPE array\n    VALUE $value OR [];\nDEFINE FIELD ports.* ON TABLE subdomain TYPE record (port);\n\nDEFINE TABLE port SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE subdomain.report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD subdomain ON TABLE port TYPE record (subdomain)\n    ASSERT $value != NONE;\nDEFINE FIELD port ON TABLE port TYPE int\n    ASSERT $value != NONE;\nDEFINE FIELD findings ON TABLE port TYPE array\n    VALUE $value OR [];\nDEFINE FIELD is_open ON TABLE port TYPE boolean\n    VALUE $value OR true;\nDEFINE FIELD findings.* ON TABLE port TYPE object;\n\n-- TODO: define events
-- Setup\n-- -- Functions\nDEFINE FUNCTION fn::report_id($token_id: string, $timestamp: int, $target: string) {\n    RETURN type::thing(\n        "report",\n        crypto::md5(string::concat($token_id, $timestamp, $target))\n);};\nDEFINE FUNCTION fn::report_exists($report_id: record()) {\n    RETURN $report_id IN (SELECT id FROM report).id;\n};\n-- -- Scopes\nDEFINE SCOPE user_scope\nSESSION 14d\nSIGNUP (\n    CREATE type::thing("user", string::lowercase(string::trim($username)))\n    SET pass = crypto::argon2::generate($password)\n)\nSIGNIN (\n    SELECT * FROM type::thing("user", string::lowercase(string::trim($username)))\n    WHERE crypto::argon2::compare(pass, $password)\n);\n-- -- Tables\n-- -- -- Report Table\nDEFINE TABLE report SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE user = $token.id AND $scope = "user_scope";\nDEFINE FIELD user ON TABLE report TYPE record (user)\n    ASSERT $value != NONE;\nDEFINE FIELD target ON TABLE report TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD timestamp ON TABLE report TYPE datetime\n    ASSERT $value != NONE;\nDEFINE FIELD subdomains ON TABLE report TYPE array\n    VALUE $value OR [];\nDEFINE FIELD subdomains.* ON TABLE report TYPE record (subdomain);\n\nDEFINE TABLE subdomain SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD report ON TABLE subdomain TYPE record (report)\n    ASSERT $value != NONE AND fn::report_exists($value);\nDEFINE FIELD subdomain_url ON TABLE subdomain TYPE string\n    ASSERT $value != NONE AND is::url($value);\nDEFINE FIELD ports ON TABLE subdomain TYPE array\n    VALUE $value OR [];\nDEFINE FIELD ports.* ON TABLE subdomain TYPE record (port);\n\nDEFINE TABLE port SCHEMAFULL\n    PERMISSIONS\n        FOR select, create, update, delete\n        WHERE subdomain.report.user = $token.id AND $scope = "user_scope";\nDEFINE FIELD subdomain ON TABLE port TYPE record (subdomain)\n    ASSERT $value != NONE;\nDEFINE FIELD port ON TABLE port TYPE int\n    ASSERT $value != NONE;\nDEFINE FIELD findings ON TABLE port TYPE array\n    VALUE $value OR [];\nDEFINE FIELD is_open ON TABLE port TYPE bool\n    VALUE $value OR true;\nDEFINE FIELD findings.* ON TABLE port TYPE object;

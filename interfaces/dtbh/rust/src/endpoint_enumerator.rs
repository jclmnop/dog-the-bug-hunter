// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: jclmnop.provider.endpoint_enumerator

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message,
        MessageDispatch, MessageFormat, SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct EnumerateEndpointsResponse {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub subdomains: Option<crate::common::Subdomains>,
    /// The list of endpoints that can be scanned for vulnerabilities.
    #[serde(default)]
    pub success: bool,
    #[serde(default)]
    pub target: String,
    /// Timestamp of when the request was received, used later for logs.
    #[serde(default)]
    pub timestamp: Timestamp,
    #[serde(rename = "userId")]
    #[serde(default)]
    pub user_id: String,
}

// Encode EnumerateEndpointsResponse as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_enumerate_endpoints_response<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &EnumerateEndpointsResponse,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(6)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.subdomains.as_ref() {
        e.str("subdomains")?;
        crate::common::encode_subdomains(e, val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    e.str("target")?;
    e.str(&val.target)?;
    e.str("timestamp")?;
    e.i64(val.timestamp.sec)?;
    e.u32(val.timestamp.nsec)?;
    e.str("userId")?;
    e.str(&val.user_id)?;
    Ok(())
}

// Decode EnumerateEndpointsResponse from cbor input stream
#[doc(hidden)]
pub fn decode_enumerate_endpoints_response(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<EnumerateEndpointsResponse, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut subdomains: Option<Option<crate::common::Subdomains>> =
            Some(None);
        let mut success: Option<bool> = None;
        let mut target: Option<String> = None;
        let mut timestamp: Option<Timestamp> = None;
        let mut user_id: Option<String> = None;

        let is_array = match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser("decoding struct EnumerateEndpointsResponse, expected array or map".to_string()))
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    1 => {
                        subdomains = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( crate::common::decode_subdomains(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Subdomains': {}", e))? ))
                        }
                    }
                    2 => success = Some(d.bool()?),
                    3 => target = Some(d.str()?.to_string()),
                    4 => {
                        timestamp = Some(wasmbus_rpc::Timestamp {
                            sec: d.i64()?,
                            nsec: d.u32()?,
                        })
                    }
                    5 => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "subdomains" => {
                        subdomains = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( crate::common::decode_subdomains(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Subdomains': {}", e))? ))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    "target" => target = Some(d.str()?.to_string()),
                    "timestamp" => {
                        timestamp = Some(wasmbus_rpc::Timestamp {
                            sec: d.i64()?,
                            nsec: d.u32()?,
                        })
                    }
                    "userId" => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        EnumerateEndpointsResponse {
            reason: reason.unwrap(),
            subdomains: subdomains.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field EnumerateEndpointsResponse.success (#2)"
                        .to_string(),
                ));
            },

            target: if let Some(__x) = target {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field EnumerateEndpointsResponse.target (#3)"
                        .to_string(),
                ));
            },

            timestamp: if let Some(__x) = timestamp {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field EnumerateEndpointsResponse.timestamp (#4)"
                        .to_string(),
                ));
            },

            user_id: if let Some(__x) = user_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field EnumerateEndpointsResponse.user_id (#5)"
                        .to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// wasmbus.contractId: jclmnop:endpoint_enumerator
/// wasmbus.providerReceive
#[async_trait]
pub trait EndpointEnumerator {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "jclmnop:endpoint_enumerator"
    }
    /// Takes a target URL, enumerates the endpoints, and eventually calls back with the results.
    async fn enumerate_endpoints(
        &self,
        ctx: &Context,
        arg: &crate::orchestrator::RunScansRequest,
    ) -> RpcResult<()>;
}

/// EndpointEnumeratorReceiver receives messages defined in the EndpointEnumerator service trait
#[doc(hidden)]
#[async_trait]
pub trait EndpointEnumeratorReceiver:
    MessageDispatch + EndpointEnumerator
{
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "EnumerateEndpoints" => {
                let value: crate::orchestrator::RunScansRequest =
                    wasmbus_rpc::common::deserialize(&message.arg).map_err(
                        |e| {
                            RpcError::Deser(format!("'RunScansRequest': {}", e))
                        },
                    )?;

                let _resp =
                    EndpointEnumerator::enumerate_endpoints(self, ctx, &value)
                        .await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "EndpointEnumerator::{}",
                message.method
            ))),
        }
    }
}

/// EndpointEnumeratorSender sends messages to a EndpointEnumerator service
/// client for sending EndpointEnumerator messages
#[derive(Clone, Debug)]
pub struct EndpointEnumeratorSender<T: Transport> {
    transport: T,
}

impl<T: Transport> EndpointEnumeratorSender<T> {
    /// Constructs a EndpointEnumeratorSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(target_arch = "wasm32")]
impl EndpointEnumeratorSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for sending to a EndpointEnumerator provider
    /// implementing the 'jclmnop:endpoint_enumerator' capability contract, with the "default" link
    pub fn new() -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jclmnop:endpoint_enumerator",
            "default",
        )
        .unwrap();
        Self { transport }
    }

    /// Constructs a client for sending to a EndpointEnumerator provider
    /// implementing the 'jclmnop:endpoint_enumerator' capability contract, with the specified link name
    pub fn new_with_link(
        link_name: &str,
    ) -> wasmbus_rpc::error::RpcResult<Self> {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_provider(
            "jclmnop:endpoint_enumerator",
            link_name,
        )?;
        Ok(Self { transport })
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> EndpointEnumerator
    for EndpointEnumeratorSender<T>
{
    #[allow(unused)]
    /// Takes a target URL, enumerates the endpoints, and eventually calls back with the results.
    async fn enumerate_endpoints(
        &self,
        ctx: &Context,
        arg: &crate::orchestrator::RunScansRequest,
    ) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "EndpointEnumerator.EnumerateEndpoints",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;
        Ok(())
    }
}

/// wasmbus.contractId: jclmnop:endpoint_enumerator_callback
/// wasmbus.actorReceive
#[async_trait]
pub trait EndpointEnumeratorCallbackReceiver {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "jclmnop:endpoint_enumerator_callback"
    }
    /// Receives the results of the EnumerateEndpoints operation.
    async fn enumerate_endpoints_callback(
        &self,
        ctx: &Context,
        arg: &EnumerateEndpointsResponse,
    ) -> RpcResult<()>;
}

/// EndpointEnumeratorCallbackReceiverReceiver receives messages defined in the EndpointEnumeratorCallbackReceiver service trait
#[doc(hidden)]
#[async_trait]
pub trait EndpointEnumeratorCallbackReceiverReceiver:
    MessageDispatch + EndpointEnumeratorCallbackReceiver
{
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "EnumerateEndpointsCallback" => {
                let value: EnumerateEndpointsResponse =
                    wasmbus_rpc::common::deserialize(&message.arg).map_err(
                        |e| {
                            RpcError::Deser(format!(
                                "'EnumerateEndpointsResponse': {}",
                                e
                            ))
                        },
                    )?;

                let _resp = EndpointEnumeratorCallbackReceiver::enumerate_endpoints_callback(self, ctx, &value).await?;
                let buf = Vec::new();
                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "EndpointEnumeratorCallbackReceiver::{}",
                message.method
            ))),
        }
    }
}

/// EndpointEnumeratorCallbackReceiverSender sends messages to a EndpointEnumeratorCallbackReceiver service
/// client for sending EndpointEnumeratorCallbackReceiver messages
#[derive(Clone, Debug)]
pub struct EndpointEnumeratorCallbackReceiverSender<T: Transport> {
    transport: T,
}

impl<T: Transport> EndpointEnumeratorCallbackReceiverSender<T> {
    /// Constructs a EndpointEnumeratorCallbackReceiverSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send>
    EndpointEnumeratorCallbackReceiverSender<
        wasmbus_rpc::provider::ProviderTransport<'send>,
    >
{
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl
    EndpointEnumeratorCallbackReceiverSender<
        wasmbus_rpc::actor::prelude::WasmHost,
    >
{
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_actor(
            actor_id.to_string(),
        )
        .unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send>
    EndpointEnumeratorCallbackReceiver
    for EndpointEnumeratorCallbackReceiverSender<T>
{
    #[allow(unused)]
    /// Receives the results of the EnumerateEndpoints operation.
    async fn enumerate_endpoints_callback(
        &self,
        ctx: &Context,
        arg: &EnumerateEndpointsResponse,
    ) -> RpcResult<()> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self.transport.send(ctx, Message{ method: "EndpointEnumeratorCallbackReceiver.EnumerateEndpointsCallback", arg: Cow::Borrowed(&buf)}, None).await?;
        Ok(())
    }
}

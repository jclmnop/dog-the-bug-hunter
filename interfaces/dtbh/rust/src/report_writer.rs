// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: jclmnop.dtbh.interface.report_writer

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message,
        MessageDispatch, MessageFormat, SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetReportsRequest {
    /// If not specified, defaults to latest report
    #[serde(rename = "endTimestamp")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub end_timestamp: Option<Timestamp>,
    /// If not specified, defaults to earliest report
    #[serde(rename = "startTimestamp")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub start_timestamp: Option<Timestamp>,
    /// If no target is specified, all target reports for the given time range will be returned
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub target: Option<String>,
    #[serde(rename = "userId")]
    #[serde(default)]
    pub user_id: String,
}

// Encode GetReportsRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_reports_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetReportsRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    if let Some(val) = val.end_timestamp.as_ref() {
        e.str("endTimestamp")?;
        e.i64(val.sec)?;
        e.u32(val.nsec)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.start_timestamp.as_ref() {
        e.str("startTimestamp")?;
        e.i64(val.sec)?;
        e.u32(val.nsec)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.target.as_ref() {
        e.str("target")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("userId")?;
    e.str(&val.user_id)?;
    Ok(())
}

// Decode GetReportsRequest from cbor input stream
#[doc(hidden)]
pub fn decode_get_reports_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetReportsRequest, RpcError> {
    let __result = {
        let mut end_timestamp: Option<Option<Timestamp>> = Some(None);
        let mut start_timestamp: Option<Option<Timestamp>> = Some(None);
        let mut target: Option<Option<String>> = Some(None);
        let mut user_id: Option<String> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct GetReportsRequest, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        end_timestamp =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(wasmbus_rpc::Timestamp {
                                    sec: d.i64()?,
                                    nsec: d.u32()?,
                                }))
                            }
                    }
                    1 => {
                        start_timestamp =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(wasmbus_rpc::Timestamp {
                                    sec: d.i64()?,
                                    nsec: d.u32()?,
                                }))
                            }
                    }
                    2 => {
                        target =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    3 => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "endTimestamp" => {
                        end_timestamp =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(wasmbus_rpc::Timestamp {
                                    sec: d.i64()?,
                                    nsec: d.u32()?,
                                }))
                            }
                    }
                    "startTimestamp" => {
                        start_timestamp =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(wasmbus_rpc::Timestamp {
                                    sec: d.i64()?,
                                    nsec: d.u32()?,
                                }))
                            }
                    }
                    "target" => {
                        target =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "userId" => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        GetReportsRequest {
            end_timestamp: end_timestamp.unwrap(),
            start_timestamp: start_timestamp.unwrap(),
            target: target.unwrap(),

            user_id: if let Some(__x) = user_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetReportsRequest.user_id (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct GetReportsResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reports: Option<Reports>,
    #[serde(default)]
    pub success: bool,
}

// Encode GetReportsResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_get_reports_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &GetReportsResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.reports.as_ref() {
        e.str("reports")?;
        encode_reports(e, val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode GetReportsResult from cbor input stream
#[doc(hidden)]
pub fn decode_get_reports_result(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<GetReportsResult, RpcError> {
    let __result = {
        let mut reason: Option<Option<String>> = Some(None);
        let mut reports: Option<Option<Reports>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct GetReportsResult, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    1 => {
                        reports = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_reports(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.report_writer#Reports': {}", e))? ))
                        }
                    }
                    2 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "reason" => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "reports" => {
                        reports = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( decode_reports(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.report_writer#Reports': {}", e))? ))
                        }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        GetReportsResult {
            reason: reason.unwrap(),
            reports: reports.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field GetReportsResult.success (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct Report {
    /// The findings for the report are stored in the open
    /// ports for each subdomain.
    pub subdomains: crate::common::Subdomains,
    #[serde(default)]
    pub target: String,
    #[serde(default)]
    pub timestamp: Timestamp,
    /// The user id is used to identify the user and must be passed in by the api
    #[serde(rename = "userId")]
    #[serde(default)]
    pub user_id: String,
}

// Encode Report as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_report<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Report,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(4)?;
    e.str("subdomains")?;
    crate::common::encode_subdomains(e, &val.subdomains)?;
    e.str("target")?;
    e.str(&val.target)?;
    e.str("timestamp")?;
    e.i64(val.timestamp.sec)?;
    e.u32(val.timestamp.nsec)?;
    e.str("userId")?;
    e.str(&val.user_id)?;
    Ok(())
}

// Decode Report from cbor input stream
#[doc(hidden)]
pub fn decode_report(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<Report, RpcError> {
    let __result = {
        let mut subdomains: Option<crate::common::Subdomains> = None;
        let mut target: Option<String> = None;
        let mut timestamp: Option<Timestamp> = None;
        let mut user_id: Option<String> = None;

        let is_array = match d.datatype()? {
            wasmbus_rpc::cbor::Type::Array => true,
            wasmbus_rpc::cbor::Type::Map => false,
            _ => {
                return Err(RpcError::Deser(
                    "decoding struct Report, expected array or map".to_string(),
                ))
            }
        };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
            0 => subdomains = Some(crate::common::decode_subdomains(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Subdomains': {}", e))?),1 => target = Some(d.str()?.to_string()),2 => timestamp = Some(wasmbus_rpc::Timestamp{ sec: d.i64()?, nsec: d.u32()? }),3 => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                    }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                "subdomains" => subdomains = Some(crate::common::decode_subdomains(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Subdomains': {}", e))?),"target" => target = Some(d.str()?.to_string()),"timestamp" => timestamp = Some(wasmbus_rpc::Timestamp{ sec: d.i64()?, nsec: d.u32()? }),"userId" => user_id = Some(d.str()?.to_string()),         _ => d.skip()?,
                    }
            }
        }
        Report {
            subdomains: if let Some(__x) = subdomains {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Report.subdomains (#0)".to_string(),
                ));
            },

            target: if let Some(__x) = target {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Report.target (#1)".to_string(),
                ));
            },

            timestamp: if let Some(__x) = timestamp {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Report.timestamp (#2)".to_string(),
                ));
            },

            user_id: if let Some(__x) = user_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field Report.user_id (#3)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
pub type Reports = Vec<Report>;

// Encode Reports as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_reports<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &Reports,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.array(val.len() as u64)?;
    for item in val.iter() {
        encode_report(e, item)?;
    }
    Ok(())
}

// Decode Reports from cbor input stream
#[doc(hidden)]
pub fn decode_reports(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<Reports, RpcError> {
    let __result = {
        if let Some(n) = d.array()? {
            let mut arr: Vec<Report> = Vec::with_capacity(n as usize);
            for _ in 0..(n as usize) {
                arr.push(decode_report(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.report_writer#Report': {}", e))?)
            }
            arr
        } else {
            // indefinite array
            let mut arr: Vec<Report> = Vec::new();
            loop {
                match d.datatype() {
                                Err(_) => break,
                                Ok(wasmbus_rpc::cbor::Type::Break) => break,
                                Ok(_) => arr.push(decode_report(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.report_writer#Report': {}", e))?)
                            }
            }
            arr
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct WriteReportResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub message: Option<String>,
    #[serde(default)]
    pub success: bool,
}

// Encode WriteReportResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_write_report_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &WriteReportResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(2)?;
    if let Some(val) = val.message.as_ref() {
        e.str("message")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode WriteReportResult from cbor input stream
#[doc(hidden)]
pub fn decode_write_report_result(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<WriteReportResult, RpcError> {
    let __result = {
        let mut message: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct WriteReportResult, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        message =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    1 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "message" => {
                        message =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        WriteReportResult {
            message: message.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field WriteReportResult.success (#1)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Write and retrieve reports to keyvalue storage
/// wasmbus.contractId: dtbh:reportwriter
/// wasmbus.actorReceive
#[async_trait]
pub trait ReportWriter {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "dtbh:reportwriter"
    }
    /// Write a generated report to keyvalue storage
    async fn write_report(
        &self,
        ctx: &Context,
        arg: &Report,
    ) -> RpcResult<WriteReportResult>;
    async fn get_reports(
        &self,
        ctx: &Context,
        arg: &GetReportsRequest,
    ) -> RpcResult<GetReportsResult>;
}

/// ReportWriterReceiver receives messages defined in the ReportWriter service trait
/// Write and retrieve reports to keyvalue storage
#[doc(hidden)]
#[async_trait]
pub trait ReportWriterReceiver: MessageDispatch + ReportWriter {
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "WriteReport" => {
                let value: Report = wasmbus_rpc::common::deserialize(
                    &message.arg,
                )
                .map_err(|e| RpcError::Deser(format!("'Report': {}", e)))?;

                let resp =
                    ReportWriter::write_report(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            "GetReports" => {
                let value: GetReportsRequest =
                    wasmbus_rpc::common::deserialize(&message.arg).map_err(
                        |e| {
                            RpcError::Deser(format!(
                                "'GetReportsRequest': {}",
                                e
                            ))
                        },
                    )?;

                let resp = ReportWriter::get_reports(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "ReportWriter::{}",
                message.method
            ))),
        }
    }
}

/// ReportWriterSender sends messages to a ReportWriter service
/// Write and retrieve reports to keyvalue storage
/// client for sending ReportWriter messages
#[derive(Clone, Debug)]
pub struct ReportWriterSender<T: Transport> {
    transport: T,
}

impl<T: Transport> ReportWriterSender<T> {
    /// Constructs a ReportWriterSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send>
    ReportWriterSender<wasmbus_rpc::provider::ProviderTransport<'send>>
{
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl ReportWriterSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_actor(
            actor_id.to_string(),
        )
        .unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> ReportWriter
    for ReportWriterSender<T>
{
    #[allow(unused)]
    /// Write a generated report to keyvalue storage
    async fn write_report(
        &self,
        ctx: &Context,
        arg: &Report,
    ) -> RpcResult<WriteReportResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "ReportWriter.WriteReport",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: WriteReportResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| {
                RpcError::Deser(format!("'{}': WriteReportResult", e))
            })?;
        Ok(value)
    }
    #[allow(unused)]
    async fn get_reports(
        &self,
        ctx: &Context,
        arg: &GetReportsRequest,
    ) -> RpcResult<GetReportsResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "ReportWriter.GetReports",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: GetReportsResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| {
            RpcError::Deser(format!("'{}': GetReportsResult", e))
        })?;
        Ok(value)
    }
}

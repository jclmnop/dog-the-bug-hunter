// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: jclmnop.dtbh.interface.orchestrator

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message,
        MessageDispatch, MessageFormat, SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct RunScansRequest {
    /// The number of concurrent scans to run for dns resolving
    #[serde(rename = "dnsConcurrency")]
    #[serde(default)]
    pub dns_concurrency: u32,
    /// The number of concurrent scans to run for http-endpoint scanning
    #[serde(rename = "httpConcurrency")]
    #[serde(default)]
    pub http_concurrency: u32,
    /// The number of concurrent scans to run for port scanning
    #[serde(rename = "portConcurrency")]
    #[serde(default)]
    pub port_concurrency: u32,
    /// The target to scan
    #[serde(default)]
    pub target: String,
    #[serde(rename = "userId")]
    #[serde(default)]
    pub user_id: String,
}

// Encode RunScansRequest as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_run_scans_request<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &RunScansRequest,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(5)?;
    e.str("dnsConcurrency")?;
    e.u32(val.dns_concurrency)?;
    e.str("httpConcurrency")?;
    e.u32(val.http_concurrency)?;
    e.str("portConcurrency")?;
    e.u32(val.port_concurrency)?;
    e.str("target")?;
    e.str(&val.target)?;
    e.str("userId")?;
    e.str(&val.user_id)?;
    Ok(())
}

// Decode RunScansRequest from cbor input stream
#[doc(hidden)]
pub fn decode_run_scans_request(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<RunScansRequest, RpcError> {
    let __result = {
        let mut dns_concurrency: Option<u32> = None;
        let mut http_concurrency: Option<u32> = None;
        let mut port_concurrency: Option<u32> = None;
        let mut target: Option<String> = None;
        let mut user_id: Option<String> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct RunScansRequest, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => dns_concurrency = Some(d.u32()?),
                    1 => http_concurrency = Some(d.u32()?),
                    2 => port_concurrency = Some(d.u32()?),
                    3 => target = Some(d.str()?.to_string()),
                    4 => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "dnsConcurrency" => dns_concurrency = Some(d.u32()?),
                    "httpConcurrency" => http_concurrency = Some(d.u32()?),
                    "portConcurrency" => port_concurrency = Some(d.u32()?),
                    "target" => target = Some(d.str()?.to_string()),
                    "userId" => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        RunScansRequest {
            dns_concurrency: if let Some(__x) = dns_concurrency {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RunScansRequest.dns_concurrency (#0)"
                        .to_string(),
                ));
            },

            http_concurrency: if let Some(__x) = http_concurrency {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RunScansRequest.http_concurrency (#1)"
                        .to_string(),
                ));
            },

            port_concurrency: if let Some(__x) = port_concurrency {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RunScansRequest.port_concurrency (#2)"
                        .to_string(),
                ));
            },

            target: if let Some(__x) = target {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RunScansRequest.target (#3)".to_string(),
                ));
            },

            user_id: if let Some(__x) = user_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field RunScansRequest.user_id (#4)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Handle the entire process of scanning a target for vulnerabilities
/// wasmbus.contractId: dtbh:orchestrator
/// wasmbus.actorReceive
#[async_trait]
pub trait Orchestrator {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "dtbh:orchestrator"
    }
    /// Run scans for a given target
    async fn run_scans(
        &self,
        ctx: &Context,
        arg: &RunScansRequest,
    ) -> RpcResult<crate::report_writer::Report>;
}

/// OrchestratorReceiver receives messages defined in the Orchestrator service trait
/// Handle the entire process of scanning a target for vulnerabilities
#[doc(hidden)]
#[async_trait]
pub trait OrchestratorReceiver: MessageDispatch + Orchestrator {
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "RunScans" => {
                let value: RunScansRequest = wasmbus_rpc::common::deserialize(
                    &message.arg,
                )
                .map_err(|e| {
                    RpcError::Deser(format!("'RunScansRequest': {}", e))
                })?;

                let resp = Orchestrator::run_scans(self, ctx, &value).await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "Orchestrator::{}",
                message.method
            ))),
        }
    }
}

/// OrchestratorSender sends messages to a Orchestrator service
/// Handle the entire process of scanning a target for vulnerabilities
/// client for sending Orchestrator messages
#[derive(Clone, Debug)]
pub struct OrchestratorSender<T: Transport> {
    transport: T,
}

impl<T: Transport> OrchestratorSender<T> {
    /// Constructs a OrchestratorSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send>
    OrchestratorSender<wasmbus_rpc::provider::ProviderTransport<'send>>
{
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl OrchestratorSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_actor(
            actor_id.to_string(),
        )
        .unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> Orchestrator
    for OrchestratorSender<T>
{
    #[allow(unused)]
    /// Run scans for a given target
    async fn run_scans(
        &self,
        ctx: &Context,
        arg: &RunScansRequest,
    ) -> RpcResult<crate::report_writer::Report> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "Orchestrator.RunScans",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: crate::report_writer::Report =
            wasmbus_rpc::common::deserialize(&resp)
                .map_err(|e| RpcError::Deser(format!("'{}': Report", e)))?;
        Ok(value)
    }
}

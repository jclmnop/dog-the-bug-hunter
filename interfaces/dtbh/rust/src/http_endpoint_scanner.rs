// This file is @generated by wasmcloud/weld-codegen 0.7.0.
// It is not intended for manual editing.
// namespace: jclmnop.dtbh.interface.http_endpoint_scanner

#[allow(unused_imports)]
use async_trait::async_trait;
#[allow(unused_imports)]
use serde::{Deserialize, Serialize};
#[allow(unused_imports)]
use std::{borrow::Borrow, borrow::Cow, io::Write, string::ToString};
#[allow(unused_imports)]
use wasmbus_rpc::{
    cbor::*,
    common::{
        deserialize, message_format, serialize, Context, Message,
        MessageDispatch, MessageFormat, SendOpts, Transport,
    },
    error::{RpcError, RpcResult},
    Timestamp,
};

#[allow(dead_code)]
pub const SMITHY_VERSION: &str = "1.0";

/// Params for the scan. This schema will most likely change
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct ScanEndpointParams {
    /// The endpoint for scanning
    #[serde(default)]
    pub endpoint: String,
    /// Optional string to be appended to user agent string, usually so the target
    /// is aware of the purpose of requests (an example would be <username>@wearehackerone)
    #[serde(rename = "userAgentTag")]
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub user_agent_tag: Option<String>,
    /// User ID is passed from the API, currently only used for logging purposes
    #[serde(rename = "userId")]
    #[serde(default)]
    pub user_id: String,
}

// Encode ScanEndpointParams as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_scan_endpoint_params<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &ScanEndpointParams,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    e.str("endpoint")?;
    e.str(&val.endpoint)?;
    if let Some(val) = val.user_agent_tag.as_ref() {
        e.str("userAgentTag")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("userId")?;
    e.str(&val.user_id)?;
    Ok(())
}

// Decode ScanEndpointParams from cbor input stream
#[doc(hidden)]
pub fn decode_scan_endpoint_params(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<ScanEndpointParams, RpcError> {
    let __result = {
        let mut endpoint: Option<String> = None;
        let mut user_agent_tag: Option<Option<String>> = Some(None);
        let mut user_id: Option<String> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct ScanEndpointParams, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => endpoint = Some(d.str()?.to_string()),
                    1 => {
                        user_agent_tag =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    2 => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "endpoint" => endpoint = Some(d.str()?.to_string()),
                    "userAgentTag" => {
                        user_agent_tag =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "userId" => user_id = Some(d.str()?.to_string()),
                    _ => d.skip()?,
                }
            }
        }
        ScanEndpointParams {
            endpoint: if let Some(__x) = endpoint {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ScanEndpointParams.endpoint (#0)"
                        .to_string(),
                ));
            },
            user_agent_tag: user_agent_tag.unwrap(),

            user_id: if let Some(__x) = user_id {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ScanEndpointParams.user_id (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
#[derive(Clone, Debug, Default, Deserialize, Eq, PartialEq, Serialize)]
pub struct ScanEndpointResult {
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub finding: Option<crate::common::Finding>,
    #[serde(default, skip_serializing_if = "Option::is_none")]
    pub reason: Option<String>,
    /// False if there was an issue scanning the endpoint
    #[serde(default)]
    pub success: bool,
}

// Encode ScanEndpointResult as CBOR and append to output stream
#[doc(hidden)]
#[allow(unused_mut)]
pub fn encode_scan_endpoint_result<W: wasmbus_rpc::cbor::Write>(
    mut e: &mut wasmbus_rpc::cbor::Encoder<W>,
    val: &ScanEndpointResult,
) -> RpcResult<()>
where
    <W as wasmbus_rpc::cbor::Write>::Error: std::fmt::Display,
{
    e.map(3)?;
    if let Some(val) = val.finding.as_ref() {
        e.str("finding")?;
        crate::common::encode_finding(e, val)?;
    } else {
        e.null()?;
    }
    if let Some(val) = val.reason.as_ref() {
        e.str("reason")?;
        e.str(val)?;
    } else {
        e.null()?;
    }
    e.str("success")?;
    e.bool(val.success)?;
    Ok(())
}

// Decode ScanEndpointResult from cbor input stream
#[doc(hidden)]
pub fn decode_scan_endpoint_result(
    d: &mut wasmbus_rpc::cbor::Decoder<'_>,
) -> Result<ScanEndpointResult, RpcError> {
    let __result = {
        let mut finding: Option<Option<crate::common::Finding>> = Some(None);
        let mut reason: Option<Option<String>> = Some(None);
        let mut success: Option<bool> = None;

        let is_array =
            match d.datatype()? {
                wasmbus_rpc::cbor::Type::Array => true,
                wasmbus_rpc::cbor::Type::Map => false,
                _ => return Err(RpcError::Deser(
                    "decoding struct ScanEndpointResult, expected array or map"
                        .to_string(),
                )),
            };
        if is_array {
            let len = d.fixed_array()?;
            for __i in 0..(len as usize) {
                match __i {
                    0 => {
                        finding = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( crate::common::decode_finding(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Finding': {}", e))? ))
                        }
                    }
                    1 => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    2 => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        } else {
            let len = d.fixed_map()?;
            for __i in 0..(len as usize) {
                match d.str()? {
                    "finding" => {
                        finding = if wasmbus_rpc::cbor::Type::Null
                            == d.datatype()?
                        {
                            d.skip()?;
                            Some(None)
                        } else {
                            Some(Some( crate::common::decode_finding(d).map_err(|e| format!("decoding 'jclmnop.dtbh.interface.common#Finding': {}", e))? ))
                        }
                    }
                    "reason" => {
                        reason =
                            if wasmbus_rpc::cbor::Type::Null == d.datatype()? {
                                d.skip()?;
                                Some(None)
                            } else {
                                Some(Some(d.str()?.to_string()))
                            }
                    }
                    "success" => success = Some(d.bool()?),
                    _ => d.skip()?,
                }
            }
        }
        ScanEndpointResult {
            finding: finding.unwrap(),
            reason: reason.unwrap(),

            success: if let Some(__x) = success {
                __x
            } else {
                return Err(RpcError::Deser(
                    "missing field ScanEndpointResult.success (#2)".to_string(),
                ));
            },
        }
    };
    Ok(__result)
}
/// Scans a target domain for vulnerabilities and generates a report if any
/// are found. Can be triggered by actor to actor calls or message subscriptions.
/// wasmbus.contractId: dtbh:scanner
/// wasmbus.actorReceive
#[async_trait]
pub trait HttpEndpointScanner {
    /// returns the capability contract id for this interface
    fn contract_id() -> &'static str {
        "dtbh:scanner"
    }
    /// Scan an endpoint for a vulnerability
    async fn scan_endpoint(
        &self,
        ctx: &Context,
        arg: &ScanEndpointParams,
    ) -> RpcResult<ScanEndpointResult>;
}

/// HttpEndpointScannerReceiver receives messages defined in the HttpEndpointScanner service trait
/// Scans a target domain for vulnerabilities and generates a report if any
/// are found. Can be triggered by actor to actor calls or message subscriptions.
#[doc(hidden)]
#[async_trait]
pub trait HttpEndpointScannerReceiver:
    MessageDispatch + HttpEndpointScanner
{
    async fn dispatch(
        &self,
        ctx: &Context,
        message: Message<'_>,
    ) -> Result<Vec<u8>, RpcError> {
        match message.method {
            "ScanEndpoint" => {
                let value: ScanEndpointParams =
                    wasmbus_rpc::common::deserialize(&message.arg).map_err(
                        |e| {
                            RpcError::Deser(format!(
                                "'ScanEndpointParams': {}",
                                e
                            ))
                        },
                    )?;

                let resp =
                    HttpEndpointScanner::scan_endpoint(self, ctx, &value)
                        .await?;
                let buf = wasmbus_rpc::common::serialize(&resp)?;

                Ok(buf)
            }
            _ => Err(RpcError::MethodNotHandled(format!(
                "HttpEndpointScanner::{}",
                message.method
            ))),
        }
    }
}

/// HttpEndpointScannerSender sends messages to a HttpEndpointScanner service
/// Scans a target domain for vulnerabilities and generates a report if any
/// are found. Can be triggered by actor to actor calls or message subscriptions.
/// client for sending HttpEndpointScanner messages
#[derive(Clone, Debug)]
pub struct HttpEndpointScannerSender<T: Transport> {
    transport: T,
}

impl<T: Transport> HttpEndpointScannerSender<T> {
    /// Constructs a HttpEndpointScannerSender with the specified transport
    pub fn via(transport: T) -> Self {
        Self { transport }
    }

    pub fn set_timeout(&self, interval: std::time::Duration) {
        self.transport.set_timeout(interval);
    }
}

#[cfg(not(target_arch = "wasm32"))]
impl<'send>
    HttpEndpointScannerSender<wasmbus_rpc::provider::ProviderTransport<'send>>
{
    /// Constructs a Sender using an actor's LinkDefinition,
    /// Uses the provider's HostBridge for rpc
    pub fn for_actor(ld: &'send wasmbus_rpc::core::LinkDefinition) -> Self {
        Self {
            transport: wasmbus_rpc::provider::ProviderTransport::new(ld, None),
        }
    }
}
#[cfg(target_arch = "wasm32")]
impl HttpEndpointScannerSender<wasmbus_rpc::actor::prelude::WasmHost> {
    /// Constructs a client for actor-to-actor messaging
    /// using the recipient actor's public key
    pub fn to_actor(actor_id: &str) -> Self {
        let transport = wasmbus_rpc::actor::prelude::WasmHost::to_actor(
            actor_id.to_string(),
        )
        .unwrap();
        Self { transport }
    }
}
#[async_trait]
impl<T: Transport + std::marker::Sync + std::marker::Send> HttpEndpointScanner
    for HttpEndpointScannerSender<T>
{
    #[allow(unused)]
    /// Scan an endpoint for a vulnerability
    async fn scan_endpoint(
        &self,
        ctx: &Context,
        arg: &ScanEndpointParams,
    ) -> RpcResult<ScanEndpointResult> {
        let buf = wasmbus_rpc::common::serialize(arg)?;

        let resp = self
            .transport
            .send(
                ctx,
                Message {
                    method: "HttpEndpointScanner.ScanEndpoint",
                    arg: Cow::Borrowed(&buf),
                },
                None,
            )
            .await?;

        let value: ScanEndpointResult = wasmbus_rpc::common::deserialize(&resp)
            .map_err(|e| {
                RpcError::Deser(format!("'{}': ScanEndpointResult", e))
            })?;
        Ok(value)
    }
}
